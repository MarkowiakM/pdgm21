import Functions.*
import MonteCarloPi.*
import Tree.*
import Salary.*

object Main {

  def main(args: Array[String]): Unit = {
//    println(Runtime.getRuntime().availableProcessors())

//    println("| --------------------------------------------------------------------------- |")
//    println("|                              finding PI                                     | ")
//    println("\n| points: 1000 -------------------------------------------------------------- |")
//    println("| sequential:     " + testTime(findPiSeq(1000)))
//    println("| 2 futures:      " + testTime(findPiFutures(1000, 2)))
//    println("| 4 futures:      " + testTime(findPiFutures(1000, 4)))
//    println("| 10 futures:     " + testTime(findPiFutures(1000, 10)))
//    println("| 100 futures:    " + testTime(findPiFutures(1000, 100)))
//    println("| 2000 futures:   " + testTime(findPiFutures(1000, 2000)))
//    println("| threshold 100:  " + testTime(segmentRec(1000, 100)))
//    println("| threshold 200:  " + testTime(segmentRec(1000, 200)))
//    println("| threshold 500:  " + testTime(segmentRec(1000, 500)))
//
//    println("\n| points: 100 000 ----------------------------------------------------------- |")
//    println("| sequential:      " + testTime(findPiSeq(100000)))
//    println("| 2 futures:       " + testTime(findPiFutures(100000, 2)))
//    println("| 4 futures:       " + testTime(findPiFutures(100000, 4)))
//    println("| 10 futures:      " + testTime(findPiFutures(100000, 10)))
//    println("| 100 futures:     " + testTime(findPiFutures(100000, 100)))
//    println("| 2000 futures:    " + testTime(findPiFutures(100000, 2000)))
//    println("| threshold 1000:  " + testTime(segmentRec(100000, 1000)))
//    println("| threshold 10000: " + testTime(segmentRec(100000, 10000)))
//    println("| threshold 20000: " + testTime(segmentRec(100000, 20000)))
//    println("| threshold 50000: " + testTime(segmentRec(100000, 50000)))
//
//    println("\n| points: 10 000 000 -------------------------------------------------------- |")
//    println("| sequential:        " + testTime(findPiSeq(10000000)))
//    println("| 2 futures:         " + testTime(findPiFutures(10000000, 2)))
//    println("| 4 futures:         " + testTime(findPiFutures(10000000, 4)))
//    println("| 10 futures:        " + testTime(findPiFutures(10000000, 10)))
//    println("| 100 futures:       " + testTime(findPiFutures(10000000, 100)))
//    println("| 2000 futures:      " + testTime(findPiFutures(10000000, 2000)))
//    println("| threshold 100000:  " + testTime(segmentRec(10000000, 100000)))
//    println("| threshold 1000000: " + testTime(segmentRec(10000000, 1000000)))
//    println("| threshold 2000000: " + testTime(segmentRec(10000000, 2000000)))
//    println("| threshold 5000000: " + testTime(segmentRec(10000000, 5000000)))
//
//    println("\n| points: 1 000 000 000 ----------------------------------------------------- |")
//    println("| sequential:  " + testTime(findPiSeq(1000000000)))
//    println("| 2 futures:    " + testTime(findPiFutures(1000000000, 2)))
//    println("| 4 futures:    " + testTime(findPiFutures(1000000000, 4)))
//    println("| 10 futures:   " + testTime(findPiFutures(1000000000, 10)))
//    println("| 100 futures:  " + testTime(findPiFutures(1000000000, 100)))
//    println("| 2000 futures: " + testTime(findPiFutures(1000000000, 2000)))
//
//    println("\n| --------------------------------------------------------------------------- |")
//    println("|                              randomTree                                     | ")
//
//    println("\n| depth: 5 ----------------------------------------------------------------- |")
//    println("| sequential: " + testTime(randomTree(5)))
//    println("| parallel 1: " + testTime(randomTreePar(5, 1)))
//    println("| parallel 2: " + testTime(randomTreePar(5, 2)))
//    println("| parallel 3: " + testTime(randomTreePar(5, 3)))
//
//    println("\n| depth: 15 ----------------------------------------------------------------- |")
//    println("| sequential: " + testTime(randomTree(15)))
//    println("| parallel 1: " + testTime(randomTreePar(15, 1)))
//    println("| parallel 2: " + testTime(randomTreePar(15, 2)))
//    println("| parallel 3: " + testTime(randomTreePar(15, 3)))
//
//    println("\n| depth: 25 ----------------------------------------------------------------- |")
//    println("| sequential: " + testTime(randomTree(25)))
//    println("| parallel 1: " + testTime(randomTreePar(25, 1)))
//    println("| parallel 2: " + testTime(randomTreePar(25, 2)))
//    println("| parallel 3: " + testTime(randomTreePar(25, 3)))
//
//    println("| --------------------------------------------------------------------------- |")
//    println("|                             deepenTree                                      | ")
    val tree5 = randomTree(5)
    val tree15 = randomTree(15)
//    println("\n| depth: 15 ----------------------------------------------------------------- |")
//    println("| sequential: " + testTime(deepenSeq(tree15)))
//    println("| parallel 1: " + testTime(deepenPar(tree15, 1)))
//    println("| parallel 2: " + testTime(deepenPar(tree15, 2)))
//    println("| parallel 3: " + testTime(deepenPar(tree15, 3)))
//
    val tree25 = randomTree(25)
//    println("\n| depth: 25 ----------------------------------------------------------------- |")
//    println("| sequential: " + testTime(deepenSeq(tree25)))
//    println("| parallel 1: " + testTime(deepenPar(tree25, 1)))
//    println("| parallel 2: " + testTime(deepenPar(tree25, 2)))
//    println("| parallel 3: " + testTime(deepenPar(tree25, 3)))

//    println("| --------------------------------------------------------------------------- |")
//    println("|                                sumTree                                      | ")
//    println("\n| depth: 5 ------------------------------------------------------------------ |")
//    println("| sequential: " + testTime(sumTreeSeq(tree5)))
//    println("| parallel 1: " + testTime(sumTreePar(tree5, 1)))
//    println("| parallel 2: " + testTime(sumTreePar(tree5, 2)))
//    println("| parallel 3: " + testTime(sumTreePar(tree5, 3)))
//    println("| parallel 6: " + testTime(sumTreePar(tree5, 6)))
//
//    println("| --------------------------------------------------------------------------- |")
//    println("|                                sumTree                                      | ")
//    println("\n| depth: 15 ----------------------------------------------------------------- |")
//    println("| sequential: " + testTime(sumTreeSeq(tree15)))
//    println("| parallel 1: " + testTime(sumTreePar(tree15, 1)))
//    println("| parallel 2: " + testTime(sumTreePar(tree15, 2)))
//    println("| parallel 3: " + testTime(sumTreePar(tree15, 3)))
//    println("| parallel 6: " + testTime(sumTreePar(tree15, 6)))
//    println("| parallel 6: " + testTime(sumTreePar(tree15, 10)))
//    println("| parallel 6: " + testTime(sumTreePar(tree15, 15)))
//
//    println("\n| depth: 25 ----------------------------------------------------------------- |")
//    println("| sequential: " + testTime(sumTreeSeq(tree25)))
//    println("| parallel 1: " + testTime(sumTreePar(tree25, 1)))
//    println("| parallel 2: " + testTime(sumTreePar(tree25, 2)))
//    println("| parallel 3: " + testTime(sumTreePar(tree25, 3)))
//    println("| parallel 6: " + testTime(sumTreePar(tree25, 6)))
//    println("| parallel 10: " + testTime(sumTreePar(tree25, 10)))
//    println("| parallel 15: " + testTime(sumTreePar(tree25, 15)))

    val workers1 = generateWorkers(1000, 30, 8)
    val workers2 = generateWorkers(1000, 3000, 8)
    val workers3 = generateWorkers(100000, 30, 8)
    val workers4 = generateWorkers(100000, 3000, 8)

    println("| --------------------------------------------------------------------------- |")
    println("|                                 salary                                      | ")
    println("\n| workers: 1000, days: 30 --------------------------------------------------- |")
    println("| sequential: " + testTime(countSalariesSeq(workers1)))
    println("| future 2:   " + testTime(countSalariesFuture(workers1)))
    println("| future 4:   " + testTime(countSalariesFuture4(workers1)))

    println("\n| workers: 1000, days: 3000 --------------------------------------------------- |")
    println("| sequential: " + testTime(countSalariesSeq(workers1)))
    println("| future 2:   " + testTime(countSalariesFuture(workers1)))
    println("| future 4:   " + testTime(countSalariesFuture4(workers1)))

    println("\n| workers: 100000, days: 30 --------------------------------------------------- |")
    println("| sequential: " + testTime(countSalariesSeq(workers3)))
    println("| future 2:   " + testTime(countSalariesFuture(workers3)))
    println("| future 4:   " + testTime(countSalariesFuture4(workers3)))

    println("\n| workers: 100000, days: 3000 --------------------------------------------------- |")
    println("| sequential: " + testTime(countSalariesSeq(workers4)))
    println("| future 2:   " + testTime(countSalariesFuture(workers4)))
    println("| future 4:   " + testTime(countSalariesFuture4(workers4)))
  }
}